<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>H5ggDraw</title>
<style>
*{
    margin: 0;
    padding: 0;
    color: #000;
    font-size: 12px;
    font-family: Tahoma, sans-serif;
    -webkit-tap-highlight-color: transparent;
    outline: none;
}body {
    background: transparent;
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
}*:not(input, checkbox, textarea) {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    user-select: none;
}.popup_container{
    position: absolute;
    z-index: 1000;
    left: 50%;
    top: 0;
}#H5AlertView{
    width: 220px;
    height: 300px;
    position: absolute;
    left: -110px;
    top: 150px;
    text-align: center;
    zoom: 0.8;
}#title-text{
    padding-top: 0px;
    font-size: 18px;
    color: #494949;
}#info-tex{
    padding: 10px;
    color: #494949;
}#content-view{
    z-index: 0;
    background: #fff;
    position: relative;
    top: 0px;
    border: solid #36393F;
    border-radius: 45px;
    padding: 10px;
}button{
    width: 100%;
    height: 40px;
    color: #D8D8D8;
    background-color: #202C3E;
    display: inline-block;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
    outline: none;
    border: solid #36393F;
    border-radius: 45px;
    padding: 0 8px;
    margin: 5px 0;
    font-size: 15px;
}button:active {
    background-color: #202A1E;
    transform: translateY(2px);
}
.a {
	-webkit-appearance: none;
	-webkit-tap-highlight-color: transparent;
	position: relative;
	border: 0;
	outline: 0;
	cursor: pointer;
	margin: 10px;
}
.a:after {
	content: '';
	width: 60px;
	height: 28px;
	display: inline-block;
	background: rgba(196, 195, 195, 0.55);
	border-radius: 18px;
	clear: both;
}
.a:before {
	content: '';
	width: 32px;
	height: 32px;
	display: block;
	position: absolute;
	left: 0;
	top: -3px;
	border-radius: 50%;
	background: rgb(255, 255, 255);
	box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6);
}

.a:checked:before {
	left: 32px;
	box-shadow: -1px 1px 3px rgba(0, 0, 0, 0.6);
}
.a:checked:after {
	background: #00da24;
}
.a,
.a:before,
.a:after,
.a:checked:before,
.a:checked:after {
	transition: ease .3s;
	-webkit-transition: ease .3s;
	-moz-transition: ease .3s;
	-o-transition: ease .3s;
}
.lable {
    text-align: top;
    font-size: 20px;
    
}
</style>
</head>

<body>
<!--悬浮菜单-->
<div class="popup_container">
<div id="H5AlertView">
<script>


function close() {
    var menu = document.querySelector("#H5AlertView");
    menu.style.display = 'none';
    setWindowTouch(false);
}
</script>
<div id="content-view">
<div id="title-text">H5GG Draw</div>
<div id="info-text">ESP Test</div>
<div>

    <l class="lable">DrawToggle</l>
    <input type="checkbox" onclick="StartDraw()" id="draw" class="a">
    <l class="lable">PlayerESP</l>
    <input type="checkbox" onclick="Playerfunc()" id="playertoggle" class="a">
    <button onclick="close()">Close</button>
</div>
</div>
</div>
</div>
</body>
<script>
document.body.addEventListener('touchstart', function () {});
setWindowDrag(0, 0, 0, 0);
var iosScale = window.devicePixelRatio;
var sWidth = 0;
var sHeight = 0;
var canvasDom = document.createElement("canvas");
document.body.appendChild(canvasDom);
canvasDom.style.height = "100%";
canvasDom.style.width = "100%";

var layout = function(){
    if(window.lastorientation==window.orientation) return;
    window.lastorientation=window.orientation;
    if(Math.abs(window.orientation)==90) {
        setWindowRect(0,0,window.screen.height,window.screen.width);
        canvasDom.width = window.screen.height * iosScale;
        canvasDom.height = window.screen.width * iosScale;
        sWidth = window.screen.height;
        sHeight = window.screen.width;
    } else {
        setWindowRect(0,0,window.screen.width,window.screen.height);
        canvasDom.height = window.screen.height * iosScale;
        canvasDom.width = window.screen.width * iosScale;
        sWidth = window.screen.width;
        sHeight = window.screen.height;
    }
};layout();
window.addEventListener("orientationchange", layout, false);
setButtonAction(function(){
     var menu = document.querySelector("#H5AlertView");
     if(menu.style.display=='none') {
         menu.style.display='block';
         setWindowTouch(true);
     } else {
         menu.style.display='none';
         setWindowTouch(false);
     }});

var ctx = canvasDom.getContext('2d');
setLineWidth(iosScale);
var fontFamily = " Arial";
var cacheTimer = null;
var drawTimer = null;
var actorCache = [];
var baseAddr = Number(h5gg.getRangesList(0)[0].start);
var GWorld = 0;

function StartDraw() {
  var strt = document.getElementById("draw");
  if (strt.checked == true){
    window.draw_state = 1;
  } else {
    clearCtx();
    window.draw_state = 0;
    setTimeout(function(){alert("off")},100);
  }
}

function drawCache() {
    if (isNull(GWorld)) return;
    var Level = readLong(GWorld + 0x58);
    var ActorArray = readLong(Level + 0xA0);
    var ActorCount = readInt(Level + 0xA8);

    var tempArr = [];
    for (var i = 0; i < ActorCount; i++) {

        var actor = readLong(ActorArray + i * 8);
        if (isNull(actor)) continue;
         tempArr.push(actor);
    }
    actorCache = tempArr;
}
    
function shadowDraw() {
    clearCtx();

    GWorld = readLong(baseAddr + 0x44e9648);
    if (isNull(GWorld)) return;

    //获取自己
    var OwningGameInstance = readLong(GWorld + 0x1a8);
    var LocalPlayers = readLong(OwningGameInstance + 0x38);
    var localPlayerController = readLong(LocalPlayers + 0x0);
    var mySelf = readLong(localPlayerController + 0x30);
    if (isNull(mySelf)) return;
    var myTeam = readInt(mySelf + 0x29c);

    var playerCameraManager = readLong(mySelf + 0x660);
    if (isNull(playerCameraManager)) return;
    var povAddr = (playerCameraManager + 0xbd0 + 0x10);
    var camViewInfo = {
        Location: {
            X: readFloat(povAddr),
            Y: readFloat(povAddr + 4),
            Z: readFloat(povAddr + 4 + 4)
        },
        Rotation: {
            Pitch: readFloat(povAddr + 0xc),
            Yaw: readFloat(povAddr + 0xc + 4),
            Roll: readFloat(povAddr + 0xc + 4 + 4)
        },
        FOV: readFloat(povAddr + 0x28)
    }

    var tempMatrix = RotatorToMatrix(camViewInfo.Rotation);

    var playerCout = 0;
    for (var i = 0; i < actorCache.length; i++) {
        var actor = actorCache[i];
        var tribeid = readInt(actor + 0x5f8);
        var namestruct = actor + 0x5d8;
        var team = readInt(actor + 0x29C);
        var filter = Number(h5gg.getValue(actor, "U16")) & 0x0FFF;
        if(team<1000) continue;

        var hp = 100;

        var rootComponent = readLong(actor + 0x2c8);
        if (isNull(rootComponent)) continue;
        var worldPos = {
            X: readFloat(rootComponent + 0x290),
            Y: readFloat(rootComponent + 0x290 + 4),
            Z: readFloat(rootComponent + 0x290 + 4 + 4)
        }

        var distX = (worldPos.X - camViewInfo.Location.X) / 100;
        var distY = (worldPos.Y - camViewInfo.Location.Y) / 100;
        var distance = (distX * distX) + (distY * distY);
        var distZ = (worldPos.Z - camViewInfo.Location.Z) / 100;
        distance = Math.ceil(Math.sqrt((distZ * distZ) + distance));
        if (distance>250) continue;
        

        var zb1 = {
            X: worldPos.X,
            Y: worldPos.Y,
            Z: worldPos.Z + 80.0
        }
        var zb2 = {
            X: worldPos.X,
            Y: worldPos.Y,
            Z: worldPos.Z - 80.0
        }
        var fkzb1 = world2Screen(zb1, camViewInfo, tempMatrix);
        var fkzb2 = world2Screen(zb2, camViewInfo, tempMatrix);
        var fkgao = fkzb2.Y - fkzb1.Y;
        var fkkuan = fkgao / 2;
        var entityid = readFloat(actor + 0x5d8);
        
        var actorInfo = {
            x: fkzb1.X,
            y: fkzb1.Y,
            w: fkkuan,
            h: fkgao,
            hp: hp,
            id: filter,
            team: team,
            dis: distance,
        };
        shadowInfo(actorInfo);

        playerCout++;
    }
    var colordraw = "#8b0000"
    drawText(playerCout, sWidth / 2, 10, 20, colordraw, true);

}
var player = document.getElementById("playertoggle");
var playeryes = player.checked;
function Playerfunc() {
  if (player.checked == true){
    var playeryes = player.checked;
  } else {
    var playeryes = player.checked;
  }}

function shadowInfo(objectInfo) {

    var color = "#F00";
    if(objectInfo.x<0 || objectInfo.y<0 || objectInfo.x>sWidth || objectInfo.y>sHeight) return;
  if (objectInfo.id === 2200){
    drawText("Player " + objectInfo.id, objectInfo.x, objectInfo.y - 40, 10, color, false);
    drawText("[" + objectInfo.dis + " m]", objectInfo.x, objectInfo.y - 25, 10, color, false);
  }}
        

// ********************* 绘图相关 *********************

//清空画布
function clearCtx() {ctx.clearRect(0, 0, canvasDom.width, canvasDom.height);}
function setLineWidth(w) {ctx.lineWidth = w;}
function drawLine(x1, y1, x2, y2, color) {x1 *= iosScale;y1 *= iosScale;x2 *= iosScale;y2 *= iosScale;ctx.beginPath();ctx.fillStyle = color;ctx.strokeStyle = color;ctx.moveTo(x1, y1);ctx.lineTo(x2, y2);ctx.stroke();ctx.closePath();}
function drawCircle(x, y, r, color, isFill = true) {x *= iosScale;y *= iosScale;r *= iosScale;ctx.beginPath();ctx.strokeStyle = color;ctx.fillStyle = color;ctx.arc(x, y, r, 0, 2 * Math.PI);if (isFill) {ctx.fill();} else {ctx.stroke();}ctx.closePath();}
function drawRect(x, y, w, h, color, isFill = true) {x *= iosScale;y *= iosScale;w *= iosScale;h *= iosScale;ctx.beginPath();ctx.strokeStyle = color;ctx.fillStyle = color;if (isFill) {ctx.fillRect(x, y, w, h);} else {ctx.strokeRect(x, y, w, h);}ctx.closePath();}
function drawRoundRect(x, y, w, h, r, color, isFill = true) {x *= iosScale;y *= iosScale;w *= iosScale;h *= iosScale;r *= iosScale;ctx.beginPath();ctx.strokeStyle = color;ctx.fillStyle = color;if (w < 2 * r) r = w / 2;if (h < 2 * r) r = h / 2;ctx.beginPath();ctx.moveTo(x + r, y);ctx.arcTo(x + w, y, x + w, y + h, r);ctx.arcTo(x + w, y + h, x, y + h, r);ctx.arcTo(x, y + h, x, y, r);ctx.arcTo(x, y, x + w, y, r);if (isFill) {ctx.fill();} else {ctx.stroke();}ctx.closePath();}
function drawText(text, x, y, size, color, isFill = true) {x *= iosScale;y *= iosScale;size *= iosScale;ctx.beginPath();ctx.textAlign = "center";ctx.fillStyle = color;ctx.strokeStyle = color;ctx.font = size + 'px' + fontFamily;if (isFill) {ctx.fillText(text, x, y + size);} else {ctx.strokeText(text, x, y + size);}ctx.closePath();};
// ********************* 内存相关 *********************
function readInt(addr){return Number(h5gg.getValue(addr, "I32"));}
function readLong(addr){return Number(h5gg.getValue(addr, "I64"));}
function readFloat(addr){return Number(h5gg.getValue(addr, "F32"));}
function isNull(addr){return (addr < 0x100000000 || addr > 0x300000000);}
// ********************* UE4相关 *********************
function RotatorToMatrix(rotation) {var radPitch = rotation.Pitch * (Math.PI / 180.0);var radYaw = rotation.Yaw * (Math.PI / 180.0);var radRoll = rotation.Roll * (Math.PI / 180.0);var SP = Math.sin(radPitch);var CP = Math.cos(radPitch);var SY = Math.sin(radYaw);var CY = Math.cos(radYaw);var SR = Math.sin(radRoll);var CR = Math.cos(radRoll);var matrix = new Array(16).fill(0);matrix[0] = (CP * CY);matrix[1] = (CP * SY);matrix[2] = (SP);matrix[3] = 0;matrix[4] = (SR * SP * CY - CR * SY);matrix[5] = (SR * SP * SY + CR * CY);matrix[6] = (-SR * CP);matrix[7] = 0;matrix[8] = (-(CR * SP * CY + SR * SY));matrix[9] = (CY * SR - CR * SP * SY);matrix[10] = (CR * CP);matrix[11] = 0;matrix[12] = 0;matrix[13] = 0;matrix[14] = 0;matrix[15] = 1;return matrix;}
function vectorDot(lhs, rhs) {return (((lhs.X * rhs.X) + (lhs.Y * rhs.Y)) + (lhs.Z * rhs.Z));}
function world2Screen(worldLocation, camViewInfo, tempMatrix) {var vAxisX = {X: tempMatrix[0],Y: tempMatrix[1],Z: tempMatrix[2]};var vAxisY = {X: tempMatrix[4],Y: tempMatrix[5],Z: tempMatrix[6]};var vAxisZ = {X: tempMatrix[8],Y: tempMatrix[9],Z: tempMatrix[10]};var vDelta = {X: worldLocation.X - camViewInfo.Location.X,Y: worldLocation.Y - camViewInfo.Location.Y,Z: worldLocation.Z - camViewInfo.Location.Z};var vTransformed = {X: vectorDot(vDelta, vAxisY),Y: vectorDot(vDelta, vAxisZ),Z: vectorDot(vDelta, vAxisX)};if (vTransformed.Z < 1.0) {vTransformed.Z = 1.0;}var fov = camViewInfo.FOV;var screenCenterX = (sWidth / 2.0);var screenCenterY = (sHeight / 2.0);var re = {X: (screenCenterX + vTransformed.X * (screenCenterX / Math.tan(fov * (Math.PI / 360.0))) / vTransformed.Z),Y: (screenCenterY - vTransformed.Y * (screenCenterX / Math.tan(fov * (Math.PI / 360.0))) / vTransformed.Z)};return re;}
    
cacheTimer = setInterval(function() {drawCache();}, 700);
drawTimer = setInterval(function() {
if(window.draw_state){
shadowDraw();
if(!window.fpscount) window.fpscount=0;if(!window.fpstime) window.fpstime=performance.now();window.fpscount++;if((performance.now()-window.fpstime)>2000){window.fps = window.fpscount;window.fpstime = performance.now();window.fpscount = 0;}ctx.textBaseline="top";ctx.textAlign="center";ctx.font='60px "Arial, sans-serif"';ctx.fillStyle="red";if(window.fps) ctx.fillText(window.fps, 60, 45);}}, 30);
</script>
</html>
